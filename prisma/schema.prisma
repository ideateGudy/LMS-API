// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  instructor
  admin
}

enum SubmissionMode {
  link
  file
}

enum SubmissionStatus {
  pending
  in_progress
  done
}

model User {
  id              String                  @id @default(uuid())
  email           String                  @unique
  username        String                  @unique
  password        String
  role            Role                    @default(student)

  // Optional fields
  profilePicture  String?
  bio             String?
  firstName       String?
  lastName        String?
  gender         String?
  age            Int?
  phoneNumber     String?
  country         String?
  city            String?
  Highest_Level_Of_Education String?
  ocupation      String?
  employment_Status String?
  time_commitment String?
  learning_goals String?
  certificate_in_tech String?
  course_certificate          String?
  course_institution String?
  skill_intended_to_learn String?
  previous_experience String?
  level_of_experience String?
  device_type String?
  how_did_you_hear_about_us String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  // Relations
  courses         Course[]                @relation("CourseInstructors")
  enrolledCourses Course[]                @relation("EnrolledCourses")
  courseProgress  CourseProgress[]
  lessonProgress  LessonProgress[]
  submissions     AssignmentSubmission[]
  comments        Comment[]
  replies         Reply[]
  notifications   Notification[]

  @@map("users")
  @@index([email], name: "idx_user_email")
  @@index([username], name: "idx_user_name")
}

model Course {
  id                      String         @id @default(uuid())
  title                   String
  description             String
  category                String
  topic                   String
  language                String
  subtitleLanguage        String?
  level                   String
  duration                Int
  material                String
  promoVideo              String
  targetAudience          String
  requirements            String
  curriculum              String
  welcomeMessage          String
  congratulationsMessage  String
  submittedForReview      Boolean        @default(false)
  approved                Boolean        @default(false)
  rejected                Boolean        @default(false)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  // Relations
  instructors             User[]         @relation("CourseInstructors")
  students                User[]         @relation("EnrolledCourses")
  modules                 Module[]
  discussions             Discussion[]
  assignments             Assignment[]
  progress                CourseProgress[]

  @@map("courses")
  @@index([title], name: "idx_course_title")
  @@index([category], name: "idx_course_category")
}

model Module {
  id                 String       @id @default(uuid())
  title              String
  description        String
  number             Int
  submittedForReview Boolean      @default(false)
  approved           Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relations
  course             Course       @relation(fields: [courseId], references: [id])
  courseId           String
  lessons            Lesson[]
  assignments        Assignment[]
  discussions        Discussion[]

  @@map("modules")
}

model Lesson {
  id          String    @id @default(uuid())
  title       String
  description String
  videoUrl    String
  number      Int
  position    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    String
  assignments Assignment[]
  comments    Comment[]
  progress    LessonProgress[]

  @@map("lessons")
}

model CourseProgress {
  id        String   @id @default(uuid())
  progress  Int      @default(0)

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String

}

model LessonProgress {
  id        String   @id @default(uuid())
  completed Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
}

model Assignment {
  id          String     @id @default(uuid())
  title       String
  task        String
  startDate   DateTime
  dueDate     DateTime
  mode        SubmissionMode

  // Relations
  course      Course?    @relation(fields: [courseId], references: [id])
  courseId    String?
  module      Module?    @relation(fields: [moduleId], references: [id])
  moduleId    String?
  lesson      Lesson?    @relation(fields: [lessonId], references: [id])
  lessonId    String?
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id            String           @id @default(uuid())
  content       String
  status        SubmissionStatus @default(pending)
  grade         Int?
  createdAt     DateTime         @default(now())

  // Relations
  assignment    Assignment       @relation(fields: [assignmentId], references: [id])
  assignmentId  String
  student       User             @relation(fields: [studentId], references: [id])
  studentId     String

  @@map("assignment_submissions")
}

model Comment {
  id           String       @id @default(uuid())
  content      String
  createdAt    DateTime     @default(now())

  author       User         @relation(fields: [authorId], references: [id])
  authorId     String
  lesson       Lesson?      @relation(fields: [lessonId], references: [id])
  lessonId     String?
  discussion   Discussion?  @relation(fields: [discussionId], references: [id])
  discussionId String?
  replies      Reply[]

  @@map("comments")
}

model Reply {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())

  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String

  @@map("replies")
}

model Discussion {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())

  course     Course?    @relation(fields: [courseId], references: [id])
  courseId   String?
  module     Module?    @relation(fields: [moduleId], references: [id])
  moduleId   String?
  comments   Comment[]

  @@map("discussions")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("notifications")
}
