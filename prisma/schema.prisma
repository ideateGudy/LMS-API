// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  instructor
  admin
}

enum SkillLevel {
  Beginner
  Intermediate
  Advanced
}



enum SubmissionStatus {
  Pending
  Progress
  Done
  Graded
}

enum ReviewedSubmissionStatus {
  Pending
  Accepted
  Rejected
}

enum AssignmentStatus {
  Active
  Reviewing
  Reviewed
  Completed
  Upcoming  
}

enum SessionStatus {
  NotStarted
  Started
  Done
}

model User {
  id              String                  @id @default(uuid())
  email           String                  @unique
  username        String                  @unique
  password        String
  role            Role                    @default(student)

  // Optional fields
  profilePicture  String?
  bio             String?
  firstName       String?
  lastName        String?
  gender         String?
  age            Int?
  phoneNumber     String?
  country         String?
  city            String?
  Highest_Level_Of_Education String?
  ocupation      String?
  employment_Status String?
  time_commitment String?
  learning_goals String?
  certificate_in_tech String?
  course_certificate          String?
  course_institution String?
  skill_intended_to_learn String?
  previous_experience String?
  level_of_experience String?
  device_type String?
  how_did_you_hear_about_us String?
  createdBy String?
  isDeactivated Boolean  @default(false)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  // Relations
  coursesCreatedByUser  Course[]         @relation("CourseInstructors")
  enrolledCourses Course[]         @relation("EnrolledCourses")
  courseProgress  CourseProgress[]
  moduleProgress ModuleProgress[]
  submissions     AssignmentSubmission[]
  comments        Comment[]
  replies         Reply[]
  notifications   Notification[]

  
  sessions        Session[]
  

  @@map("users")
  @@index([email], name: "idx_user_email")
  @@index([username], name: "idx_user_name")

}

model Session {
  id                      String         @id @default(uuid())
  userId          String
  user            User    @relation(fields: [userId], references: [id])

  userAgent       String?
  createdAt       DateTime                @default(now())
  expiresAt       DateTime

  @@map("sessions")
  @@index([userId], name: "idx_userId")
  @@index([expiresAt], name: "idx_expiresAt")

}

model Course {
  id                      String         @id @default(uuid())
  title                   String
  description             String
  category                String
  skillLevel              SkillLevel?
  topic                   String
  language                String
  subtitleLanguage        String?
  level                   String
  duration                Int
  material                String
  promoVideo              String
  targetAudience          String
  requirements            String
  curriculum              String
  welcomeMessage          String
  congratulationsMessage  String
  submittedForReview      Boolean        @default(false)
  approved                Boolean        @default(false)
  rejected                Boolean        @default(false)
  completed              Boolean        @default(false)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  // Relations
  instructors             User[]         @relation("CourseInstructors")
  enrolledStudents        User[]         @relation("EnrolledCourses")
  createdBy               String
  modules                 Module[]
  discussions             Discussion[]
  assignments             Assignment[]
  progress                CourseProgress[]
  liveSessions            LiveSession[]

  @@map("courses")
  @@index([title], name: "idx_course_title")
  @@index([category], name: "idx_course_category")
  
}

model Module {
  id                 String       @id @default(uuid())
  title              String
  description        String
  moduleNumber       Int
  completed          Boolean      @default(false)
  duration           Int
  material           String
  promoVideo         String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relations
  course             Course       @relation(fields: [courseId], references: [id])
  courseId           String
  progress           ModuleProgress[]
  lessons            Lesson[]
  assignments        Assignment[]
  discussions        Discussion[]


  @@map("modules")
  @@index([courseId], name: "idx_courseId")
}

model Lesson {
  id          String    @id @default(uuid())
  title       String
  description String
  videoUrl    String
  lessonNumber      Int
  duration    Int
  material    String
  completed   Boolean @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    String
  assignments Assignment[]
  comments    Comment[]


  @@map("lessons")
  @@index([moduleId], name: "idx_moduleId")
}

model CourseProgress {
  id        String   @id @default(uuid())
  progress  Int      @default(0)

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String

  @@unique([userId, courseId])
  @@map("course_progress")
  @@index([userId], name: "idx_userId")
  @@index([courseId], name: "idx_courseId")

}

model ModuleProgress {
  id        String   @id @default(uuid())
  progress  Int      @default(0)

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  module    Module   @relation(fields: [moduleId], references: [id])
  moduleId  String


  @@map("module_progress")
  @@unique([userId, moduleId])
  @@index([userId], name: "idx_userId")
  @@index([moduleId], name: "idx_moduleId")

}



model Assignment {
  id          String     @id @default(uuid())
  title       String
  task        String
  startDate   DateTime
  dueDate     DateTime
  status      AssignmentStatus @default(Upcoming)
  

  // Relations
  course      Course?    @relation(fields: [courseId], references: [id])
  courseId    String?
  module      Module?    @relation(fields: [moduleId], references: [id])
  moduleId    String?
  lesson      Lesson?    @relation(fields: [lessonId], references: [id])
  lessonId    String?
  submissions AssignmentSubmission[]
  isLiveSession  Boolean    @default(false)
  liveSession     LiveSession?  @relation(fields: [liveSessionId], references: [id])
  liveSessionId   String?

  @@map("assignments")
  @@unique([courseId, moduleId, lessonId])
  @@unique([courseId, moduleId])
  @@index([courseId], name: "idx_courseId")
  @@index([moduleId], name: "idx_moduleId")
  @@index([lessonId], name: "idx_lessonId")
  @@index([liveSessionId], name: "idx_liveSessionId")
}


model LiveSession {
  id          String     @id @default(uuid())
  topic       String
  description String
  course      Course?    @relation(fields: [courseId], references: [id])
  courseId    String?
  startDate   DateTime
  duration    Int
  meetingUrl     String
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  status      SessionStatus @default(NotStarted)


  //Relations
  assignments     Assignment[]

  @@map("live_sessions")
}


model AssignmentSubmission {
  id            String           @id @default(uuid())

  // User fields
  content       String? // Text content of the submission
  linkUrl       String?
  fileUrl       String?
  fileName      String?
  fileSize      Int?
  fileType      String?
  status        SubmissionStatus @default(Pending) // For User

  // Instructor fields
  graded       Boolean         @default(false)
  grade         Int?
  gradedAt      DateTime?
  reviewed      Boolean         @default(false) //Check if the submission is graded or reviewStatus is Accepted or Rejected
  reviewedStatus ReviewedSubmissionStatus? // For Instructor
  reviewedAt    DateTime?
  reviewedBy    String? // Instructor ID
  reviewFeedbackMessage String? // Feedback message from instructor
  rejectedAt    DateTime? 

  // Other fields
  submittedAt   DateTime        @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  assignment    Assignment       @relation(fields: [assignmentId], references: [id])
  assignmentId  String
  student       User             @relation(fields: [studentId], references: [id])
  studentId     String

  @@map("assignment_submissions")
  @@unique([assignmentId, studentId])
  @@index([assignmentId], name: "idx_assignmentId")
  @@index([studentId], name: "idx_studentId")
}

model Comment {
  id           String       @id @default(uuid())
  content      String
  createdAt    DateTime     @default(now())

  author       User         @relation(fields: [authorId], references: [id])
  authorId     String
  lesson       Lesson?      @relation(fields: [lessonId], references: [id])
  lessonId     String?
  discussion   Discussion?  @relation(fields: [discussionId], references: [id])
  discussionId String?
  replies      Reply[]


  @@map("comments")
  @@index([lessonId], name: "idx_lessonId")
  @@index([discussionId], name: "idx_discussionId")
  @@index([authorId], name: "idx_authorId")
}

model Reply {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())

  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String

  @@map("replies")
}

model Discussion {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())

  course     Course?    @relation(fields: [courseId], references: [id])
  courseId   String?
  module     Module?    @relation(fields: [moduleId], references: [id])
  moduleId   String?
  comments   Comment[]

  @@map("discussions")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("notifications")
}
